<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PHP面试基础问答题</title>
      <link href="/2019/08/23/8/"/>
      <url>/2019/08/23/8/</url>
      
        <content type="html"><![CDATA[<h2 id="你知道哪些设计模式，六大原则是什么？"><a href="#你知道哪些设计模式，六大原则是什么？" class="headerlink" title="你知道哪些设计模式，六大原则是什么？"></a>你知道哪些设计模式，六大原则是什么？</h2><h4 id="常用的设计模式"><a href="#常用的设计模式" class="headerlink" title="常用的设计模式"></a>常用的设计模式</h4><ul><li>单例模式，</li><li>工厂模式，</li><li>观察者模式，</li><li>依赖注入</li></ul><a id="more"></a><h4 id="六大原则"><a href="#六大原则" class="headerlink" title="六大原则"></a>六大原则</h4><ol><li>单一职责原则</li><li>里氏替换原则</li><li>依赖倒置原则</li><li>接口隔离原则</li><li>迪米特法则</li><li>开闭原则</li></ol><h2 id="Redis有哪些数据类型？，redis数据存储-持久化的方式有哪些？"><a href="#Redis有哪些数据类型？，redis数据存储-持久化的方式有哪些？" class="headerlink" title="Redis有哪些数据类型？，redis数据存储/持久化的方式有哪些？"></a>Redis有哪些数据类型？，redis数据存储/持久化的方式有哪些？</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li>字符串 key-value</li><li>列表 list</li><li>哈希 hash</li><li>集合 set</li><li>有序集合 sort set</li></ol><h3 id="数据存储方式"><a href="#数据存储方式" class="headerlink" title="数据存储方式"></a>数据存储方式</h3><ol><li>快照持久化(RDB)<blockquote><p>将Redis某一时刻存在的所有数据都写入硬盘。</p></blockquote></li><li>AOF持久化<blockquote><p>当使用AOF持久化方式的时候，Redis执行写命令的时候，将被执行的写命令复制到硬盘里面，说的通俗一点就是写日志。</p></blockquote></li></ol><h2 id="PHP这些框架是怎么实现文件自动加载的？"><a href="#PHP这些框架是怎么实现文件自动加载的？" class="headerlink" title="PHP这些框架是怎么实现文件自动加载的？"></a>PHP这些框架是怎么实现文件自动加载的？</h2><h3 id="autoload"><a href="#autoload" class="headerlink" title="__autoload()"></a>__autoload()</h3><p>在 PHP5 中，若我们使用一个没有加载的类，PHP 会自动运行 __autoload() 函数。因此，我们可以对 __autoload() 进行自定义，从而完成类的加载。</p><h3 id="spl-autoload-register"><a href="#spl-autoload-register" class="headerlink" title="spl_autoload_register()"></a>spl_autoload_register()</h3><p>spl_autoload_register()会自动先调用spl_autoload()在路径中查找具有小写文件名的”.php”程序.默认查找的扩展名还有”.ini”,还可以用spl_autoload_extenstions()注册扩展名. </p><h3 id="composer"><a href="#composer" class="headerlink" title="composer"></a>composer</h3><h2 id="什么是TCP？用语言描述下三次握手，-用一些语言来实现TCP的过程"><a href="#什么是TCP？用语言描述下三次握手，-用一些语言来实现TCP的过程" class="headerlink" title="什么是TCP？用语言描述下三次握手， 用一些语言来实现TCP的过程"></a>什么是TCP？用语言描述下三次握手， 用一些语言来实现TCP的过程</h2><h3 id="个人对TCP的理解"><a href="#个人对TCP的理解" class="headerlink" title="个人对TCP的理解"></a>个人对TCP的理解</h3><ul><li>TPC/IP协议是传输层协议，主要解决数据如何在网络中传输</li><li>TCP是属于全双工的通讯</li><li>TCP连接需要进行三次握手</li></ul><h3 id="三次握手描述"><a href="#三次握手描述" class="headerlink" title="三次握手描述"></a>三次握手描述</h3><ul><li>第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认;</li><li>服务器收到syn包，必须确认客户的SYN(ack=j+1)，同时自己也发送一个SYN包(syn=k)，即SYN+ACK包，此时服务器进入SYN_RECV状态;</li><li>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。</li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7控制端口</title>
      <link href="/2019/08/23/7/"/>
      <url>/2019/08/23/7/</url>
      
        <content type="html"><![CDATA[<h5 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h5><blockquote><p>网上的大部分资料都是用iptables防火墙的，但是阿里云的centos 7默认防火墙是firewall。最为简单的方法其实就是关闭我们的防火墙：</p></blockquote><ul><li>查看下防火墙的状态：systemctl status firewalld</li><li>关闭防火墙：systemctl stop firewalld</li></ul><blockquote><p>这样就解决了，在访问下ip地址:端口号就可以看到所写的应用啦！但是这样的问题是很不安全，其实可以将firewall服务禁用，应用iptables服务（网上大部分启用端口的资料都是基于iptables服务）。</p></blockquote><a id="more"></a><h5 id="安装iptables"><a href="#安装iptables" class="headerlink" title="安装iptables"></a>安装iptables</h5><blockquote><p>由于没有防火墙会造成不安全，所以给服务器安装一应用更广的防火墙iptable</p></blockquote><ul><li><p>首先要禁用firewall，通过yum安装iptables：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld</span><br><span class="line">yum install -y iptables-services</span><br></pre></td></tr></table></figure></li><li><p>启动iptables</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start iptables</span><br></pre></td></tr></table></figure><ul><li><p>启动后可以通过<code>systemctl status iptables</code>查看状态。</p></li><li><p>更改iptables规则</p></li><li><p>将iptables文件备份下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -a /etc/sysconfig/iptables /etc/sysconfig/iptables.bak</span><br></pre></td></tr></table></figure></li><li><p>设置 INPUT 方向所有的请求都拒绝</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -P INPUT DROP</span><br></pre></td></tr></table></figure></li><li><p>放开所需端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT</span><br><span class="line">iptables -I INPUT -p tcp --dport 80 -m state --state NEW -j ACCEPT </span><br><span class="line">iptables -I INPUT -p tcp --dport 443 -m state --state NEW -j ACCEPT</span><br></pre></td></tr></table></figure></li><li><p>保存规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables-save &gt; /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure></li><li><p>设置为开机启动并且重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable iptables.service</span><br><span class="line">systemctl reboot</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不停止MySQL服务，修复数据库主从复制不一致的错误</title>
      <link href="/2019/08/23/6/"/>
      <url>/2019/08/23/6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当你的线上环境部署了Mysql主从复制的时候，如果主库出现异常，例如断电，或者误操作删除了master-bin二进制文件，导致了从数据库跟主数据库数据不一致。以下的步骤可以让你在不停止业务的情况下，对主从不一致进行修复</p></blockquote><a id="more"></a><h4 id="一、先清除现在的主从复制关系"><a href="#一、先清除现在的主从复制关系" class="headerlink" title="一、先清除现在的主从复制关系"></a>一、先清除现在的主从复制关系</h4><ol><li>清除从库的主从信息</li></ol><p>进入从库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;stop slave;</span><br><span class="line"></span><br><span class="line">QueryOK, 0 rowsaffected (0,00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;reset slave all;</span><br><span class="line"></span><br><span class="line">QueryOK, 0 rowsaffected (0,04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status\G</span><br><span class="line"></span><br><span class="line">Emptyset (0,00 sec)</span><br></pre></td></tr></table></figure><p>当使用 <code>show slave status\G</code>  显示 <code>Emptyset</code> 的时候，说明清除成功</p><ol start="2"><li>重置主库的二进制文件</li></ol><p>进入主库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; reset master;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; show master status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">            File: master-bin.000001</span><br><span class="line">        Position: 107</span><br><span class="line">    Binlog_Do_DB: </span><br><span class="line">Binlog_Ignore_DB: </span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>显示所有的binlog已被删除，且binlog从000001 开始记录</p></blockquote><h4 id="二、-准备工具-mysqldump"><a href="#二、-准备工具-mysqldump" class="headerlink" title="二、 准备工具 mysqldump"></a>二、 准备工具 mysqldump</h4><p>如果你是第一次使用mysqldump，那么可能会出现<code>mysqldump: command not found</code>的错误提示</p><p>解决办法：<br><code>ln -s /usr/local/mysql/bin/mysql /usr/bin</code></p><blockquote><p>安装mysql数据库会自带mysqldump命令，你只需要把mysqldump的命令用软连接的方式放到/usr/bin目录下，即可全局使用</p></blockquote><h4 id="三、备份主库数据库"><a href="#三、备份主库数据库" class="headerlink" title="三、备份主库数据库"></a>三、备份主库数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -proot --routines --single_transaction --master-data=2 --databases db &gt; db.sql</span><br></pre></td></tr></table></figure><p>如果你需要备份多个数据库到一个sql文件上, 只需要在db后面加上 db2，db3…</p><blockquote><ul><li>–routines：导出存储过程和函数</li><li>–single_transaction：导出开始时设置事务隔离状态，并使用一致性快照开始事务，然后unlock tables;而lock-tables是锁住一张表不能写操作，直到dump完毕。</li><li>–master-data：默认等于1，将dump起始（change master to）binlog点和pos值写到结果中，等于2是将change master to写到结果中并注释。</li></ul></blockquote><h4 id="四、把备份好的sql文件拷贝到从库"><a href="#四、把备份好的sql文件拷贝到从库" class="headerlink" title="四、把备份好的sql文件拷贝到从库"></a>四、把备份好的sql文件拷贝到从库</h4><p>使用scp远程复制的方式，可以增加传输效率，如果sql文件过大，推荐使用scp</p><p><code>scp weibo.sql root@192.0.0.2:/home</code></p><p>或者使用rz命令下载sql到本地，在使用sz命令上传到从库（不推荐），只适合小文件传输</p><h4 id="五、清空从库旧数据，重新导入主库的备份文件"><a href="#五、清空从库旧数据，重新导入主库的备份文件" class="headerlink" title="五、清空从库旧数据，重新导入主库的备份文件"></a>五、清空从库旧数据，重新导入主库的备份文件</h4><p>进入mysql终端，选择数据库</p><p><code>source /home/db.sql</code></p><p>等待导入完成</p><h4 id="在备份文件db-sql查看binlog和pos值"><a href="#在备份文件db-sql查看binlog和pos值" class="headerlink" title="在备份文件db.sql查看binlog和pos值"></a>在备份文件db.sql查看binlog和pos值</h4><p><code>head -25 db.sql</code></p><p>找到如下信息</p><blockquote><p>– CHANGE MASTER TO MASTER_LOG_FILE=’master-bin.000001’, MASTER_LOG_POS=224598557;</p></blockquote><h4 id="六、从库设置从这个日志点同步，并启动"><a href="#六、从库设置从这个日志点同步，并启动" class="headerlink" title="六、从库设置从这个日志点同步，并启动"></a>六、从库设置从这个日志点同步，并启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=&apos;192.0.0.1&apos;,master_port=3306,master_user=&apos;repl&apos;,master_password=&apos;repl&apos;, master_log_file=&apos;master-bin.000001&apos;,master_log_pos=224598557;</span><br></pre></td></tr></table></figure><h4 id="七、检查主从是否生效"><a href="#七、检查主从是否生效" class="headerlink" title="七、检查主从是否生效"></a>七、检查主从是否生效</h4><p><code>show slave status\G;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 172.18.132.110</span><br><span class="line">                  Master_User: repl</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: master-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 306231208</span><br><span class="line">               Relay_Log_File: slave-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 11831037</span><br><span class="line">        Relay_Master_Log_File: master-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>如果<code>Slave_IO_Running</code> 和 <code>Slave_SQL_Running</code>  都为Yes，说明同步成功，主从正常运行</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql解决日志的时间与系统时间不一致的问题</title>
      <link href="/2019/08/23/5/"/>
      <url>/2019/08/23/5/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW GLOBAL VARIABLES LIKE &apos;log_timestamps&apos;;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Variable_name</th><th>Value</th></tr></thead><tbody><tr><td>log_timestamps</td><td>UTC</td></tr></tbody></table><p>mysql安装后error_log,slow_log 日志时间戳默认为UTC</p><p>解决办法：</p><a id="more"></a><ol><li>不重启mysql进行设置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global log_timestamps=SYSTEM;</span><br></pre></td></tr></table></figure></li></ol><p>进行</p><ol start="2"><li>在my.conf文件的[mysqld] 中，加入<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log_timestamps=SYSTEM</span><br></pre></td></tr></table></figure></li></ol><p>重启mysql之后再次查看log_timestamps属性。</p><blockquote><p>为了防止重启服务之后，配置失效，建议在进行<code>set global log_timestamps=SYSTEM;</code> 的设置之后，同步在my.conf也保存相应的配置</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 配置 mysql5.7主从复制</title>
      <link href="/2019/08/23/4/"/>
      <url>/2019/08/23/4/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步，环境准备"><a href="#第一步，环境准备" class="headerlink" title="第一步，环境准备"></a>第一步，环境准备</h2><ul><li>主数据库：Centos 7.0 + Mysql 5.7.24</li><li>从数据库：Centos 7.0 + Myswl 5.7.24</li></ul><a id="more"></a><h2 id="主数据库配置"><a href="#主数据库配置" class="headerlink" title="主数据库配置"></a>主数据库配置</h2><ul><li><p>使用vim编辑器打开my.cnf配置文件，<code>vi /etc/my.cnf</code></p></li><li><p>在[mysqld]中加入如下参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server-id=1  //设置服务器唯一标识</span><br><span class="line">log-bin=master-bin // 开启mysql二进制文件日志，用于从数据库同步数据的凭证</span><br><span class="line">log_bin_index=master-bin.index</span><br><span class="line">binlog_do_db=weicp // 指定同步的数据库</span><br><span class="line">binlog_ignore_db=mysql // 不记录二进制日志的数据库</span><br></pre></td></tr></table></figure></li><li><p>保存配置，重启mysql服务</p></li><li><p>查看是否生效<br>使用 mysql -u root -p 进入mysql终端<br>使用<code>show master status</code>查看配置是否生效，如果生效，会得到<code>File</code>跟<code>Position</code> 两个参数值。</p></li><li><p>主库创建同步账号</p></li></ul><p>进入mysql终端</p><p><code>mysql&gt;  grant replication slave on *.* to &#39;repl&#39;@&#39;192.168.18.%&#39; identified by &#39;repl&#39;;</code></p><h2 id="从数据库配置"><a href="#从数据库配置" class="headerlink" title="从数据库配置"></a>从数据库配置</h2><ul><li><p>使用vim打开从数据库的配置文件，vi /etc/my.cnf</p></li><li><p>在[mysqld]中加入如下参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server-id = 2 //从服务器唯一标识符</span><br><span class="line">relay-log = slave-relay-bin  //从服务器二进制日志</span><br><span class="line">relay-log-index = slave-relay-bin.index</span><br></pre></td></tr></table></figure></li><li><p>重启mysql</p></li><li><p>使用 mysql -u root -p 进去mysql终端</p></li><li><p>执行下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=&apos;192.168.33.10&apos;,master_port=3306,master_user=&apos;repl&apos;,master_password=&apos;repl&apos;, master_log_file=&apos;master-bin.000001&apos;,master_log_pos=10157;</span><br></pre></td></tr></table></figure></li></ul><p>上面的命令是指定从数据使用repl用户，远程登录192.168.33.10的主数据库，同步主二进制日志文件master-bin.000001,，<code>master_log_pos</code>是主数据库的<code>Position</code>, master_log_file是主数据库的<code>File</code>值。</p><ul><li>命令生效之后启动slave，<code>start slave</code></li></ul><blockquote><p>启动slave可能会报出<code>The slave I/O thread stops because master and slave have equal MySQL server UUIDs; these UUIDs must be different for replication to work.</code>这样的错误，那是因为主从数据库的uuid相同导致的。</p></blockquote><p>解决的方法就是找到数据库文件的存放路径（注:不是mysql安装目录）例如/data/mysql里面的auto.cnf，把其中一个数据库的uuid值改掉，在启动slave就可以了。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>保证主从数据库的 max_allowed_packet 参数配置一致，可以使用 <code>show variables like &#39;max_allowed_packet&#39;;</code> 进行查看</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql开启查询缓存</title>
      <link href="/2019/08/23/3/"/>
      <url>/2019/08/23/3/</url>
      
        <content type="html"><![CDATA[<p>先查询下当前服务器上的查询缓存是否打开</p><p><code>show variables like &#39;have_query_cache&#39;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| have_query_cache | NO   |</span><br><span class="line">+------------------+-------+</span><br></pre></td></tr></table></figure><p>上面表示查询缓存是关闭的，如果变量值为YES的话，表示查询缓存开启</p><a id="more"></a><p>若要开启查询缓存，可以在my.cnf中进行配置，打开my.cnf</p><p>[mysqld]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">query_cache_type=1</span><br><span class="line"></span><br><span class="line">query_cache_size=128MB</span><br><span class="line"></span><br><span class="line">query_cache_limit=1MB</span><br></pre></td></tr></table></figure><p>保存 my.cnf文件，重启mysql服务器</p><h5 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h5><ul><li>query_cache_type</li></ul><p>如果 query_cache_type 被设置为 1 ，并且query_cache_size 为 0，则不会分配任何内存空间，此时查询缓存被禁用；如果query_cache_size 的值大于0，那么就开启查询缓存并分配了内存空间；</p><ul><li>query_cache_size</li></ul><p>表示分配的内存空间，内存空间的分配并不是越大越好，设置在100M-200M之间比较合适。</p><ul><li>query_cache_limit</li></ul><p>定义了能被缓存的查询结果最大体积，超过这个体积的查询将不会被缓存。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql设置最大连接数，如何合理设置最大连接数</title>
      <link href="/2019/08/23/2/"/>
      <url>/2019/08/23/2/</url>
      
        <content type="html"><![CDATA[<p>MySQL服务器的连接数并不是要达到最大的100%为好，还是要具体问题具体分析，下面就对MySQL服务器最大连接数的合理设置进行了详尽的分析，供您参考。</p><a id="more"></a><p>我们经常会遇见</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQL: ERROR 1040: Too many connections</span><br></pre></td></tr></table></figure><p>的情况，一种是访问量确实很高，MySQL服务器抗不住，这个时候就要考虑增加从服务器分散读压力，另外一种情况是MySQL配 置文件中<code>max_connections</code>值过小：　</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;max_connections&apos;;</span><br><span class="line"></span><br><span class="line">+-----------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| max_connections | 256 |</span><br><span class="line">+-----------------+-------+</span><br></pre></td></tr></table></figure><blockquote><p>这台MySQL服务器最大连接数是256</p></blockquote><p>然后查询一下服务器响应的最大连接数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　mysql&gt; show global status like &apos;Max_used_connections&apos;;</span><br></pre></td></tr></table></figure><blockquote><p>Max_used_connections 表示数据库，过去到现在出现过的最大连接数是245，意思就是数据库链接的高峰值是245</p></blockquote><p>很明显，高峰值为245，还没有达到我们最大链接数设置的256，这种情况下，不会出现<code>Too many connections</code>的错误。如果<code>Max_used_connections</code>的值超过<code>max_connections</code>,说明我们设置的最大值已经不满足需求了，需要调整最大链接数。那么调整多少比较合适呢？</p><p>一般情况下，最大连接数占上限连接数的85%左右，如果发现比例在10%以下，MySQL服务器连接上线就设置得过高了。<br>比较理想的设置是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　Max_used_connections / max_connections * 100% ≈ 85%</span><br></pre></td></tr></table></figure><p>　　</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议状态码，常见状态码以及描述</title>
      <link href="/2019/08/22/1/"/>
      <url>/2019/08/22/1/</url>
      
        <content type="html"><![CDATA[<p>简单汇总http状态码大类，并介绍几种常见状态码以及状态码所表示的含义。</p><a id="more"></a><h5 id="状态码大类"><a href="#状态码大类" class="headerlink" title="状态码大类"></a>状态码大类</h5><ul><li>1xx：指示信息表示请求已接收，继续处理。</li><li>2xx：成功表示请求已被成功接收、理解、接受。</li><li>3xx：重定向要完成请求必须进行更进一步的操作。</li><li>4xx：客户端错误请求有语法错误或请求无法实现。</li><li>5xx：服务器端错误服务器未能实现合法的请求。</li></ul><h5 id="常见状态码以及描述"><a href="#常见状态码以及描述" class="headerlink" title="常见状态码以及描述"></a>常见状态码以及描述</h5><ul><li>200 OK：客户端请求成功。</li><li>400 Bad Request：客户端请求有语法错误，不能被服务器所理解。</li><li>401 Unauthorized：请求未经授权，这个状态代码必须和 Authenticate 报头域一起使用。</li><li>403 Forbidden：服务器收到请求，但是拒绝提供服务。</li><li>404 Not Found：请求资源不存在，举个例子：输入了错误的 URL。 </li><li>500 Internal - Server Error：服务器发生不可预期的错误。</li><li>503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常，举个例子：HTTP/1.1  200 OK（CRLF）。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
